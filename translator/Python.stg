group Python;

packageDeclaration(name) ::=<<

    #packageDeclaration to do

>> 

qualifiedName(i, is) ::=<<

    #qualifiedName to do

>> 

multiIDImportDeclaration(i1, ids) ::=<<
#import Statement commented out due to uncertainty
#from <i1> import <ids; separator=".">

>> 

singleIDImportDeclaration(i) ::=<<
#import Statement commented out due to uncertainty
#from <i> import *
>> 

classOrInterfaceType(i, typeArguments, ids, tas) ::=<<
<i><typeArguments>
>>

typeClassOrInterfaceType(classOrInterfaceType) ::=<<
<classOrInterfaceType>
>> 

normalParameterDecl(variableModifiers, type, i) ::=<<
<i>
>> 

int() ::=<<
    #int to do
>>


byte() ::=<<

    #byte to do

>> 

typePrimitiveType(primitiveType) ::=<<

    #typePrimitiveType to do

>> 

formalParameterDeclsNormal(n, ns) ::=<<
<n><if (ns)>,<ns; separator=","><endif>
>>

formalParameters(formalParameterDecls) ::=<<
<formalParameterDecls>
>>

identifierPrimary(i, is, identifierSuffix) ::=<<
<i><if (is)>.<is; separator="."><endif>(<identifierSuffix>)
>>

primaryExpression(p, selectors, symbol) ::=<<
<p><selectors><symbol>
>> 

multiplicativeExpression(u, symbols, us) ::=<<
<u><symbols;separator="\n"><us;separator="\n">
>>

additiveExpression(m1, symbols, ms) ::=<<
<m1><symbols;separator="\n"><ms;separator="\n">
>> 

shiftExpression(a1, s, a) ::=<<
<a1><s;separator="\n"><a;separator="\n">
>>

less(x) ::=<<
 <x>
>>

test(i) ::=<<
 <i>
>>

relationalExpression(shiftExpression, relationalOp, shiftExpressions) ::=<<
<shiftExpression><relationalOp><shiftExpressions;separator="\n">
>>

instanceOfExpression(relationalExpression, type) ::=<<
<relationalExpression><type>
>>

equalityExpression(i, symbols, is) ::=<<
<i><symbols;separator="\n"><is;separator="\n">
>>

andExpression(e, es) ::=<<
<e><es;separator="\n">
>>

conditionalExpression(conditionalOrExpression, expression) ::=<<
<conditionalOrExpression><expression>
>>  


conditionalOrExpression(conditionalAndExpression, cs) ::=<<
<conditionalAndExpression><cs; separator="\n">
>>  

conditionalAndExpression(i, is) ::=<<
<i><is;separator="\n">
>> 

inclusiveOrExpression(e, es) ::=<<
<e><es;separator="\n">
>> 

exclusiveOrExpression(a, as) ::=<<
<a><as;separator="\n">
>> 

expression(conditionalExpression, assignmentOperator, expression) ::=<<
<conditionalExpression><assignmentOperator><expression>
>>

parExpression(expression) ::=<<
<expression>
>>

expressionStatement(expr) ::=<<
<expr>
>> 

block(b) ::=<<
<if(b)><b; separator="\n"><else>pass<endif>
>> 

ifStatement(parExpression,s1, s2) ::=<<
if <parExpression>:
    <s1>
<if(s2)>else:
    <s2><endif>
>>

whilestatement(parExpression, statement) ::=<<
while <parExpression>:
    <if(statement)><statement><else>pass<endif>
>> 

methodDeclarationSemiColon(mod, typeParameters, type, i, formalParameters, block) ::=<<
def <i>(<formalParameters>):
    <block>

>>

classBodyDeclarationMemberDecl(memberDecl) ::=<<
<memberDecl>
>> 

classBody(cbd) ::=<<
<cbd; separator="\n">
>> 

normalClassDeclaration(mod, i, params, type, typeList, block) ::=<<
class <i><if (typeList)>(<typeList>)<endif>:
    <if(block)><block><else>None<endif>
>> 

compilationUnit(annotations, packageDeclaration, importDeclaration, typeDeclaration) ::=<<
<annotations>
<importDeclaration>
<typeDeclaration>
>>

assign() ::=<<
=
>>

addAssign() ::=<<
+=
>>

subAssign() ::=<<
-=
>>
expressionList(expression, es) ::=<<
<expression><es; separator="\n">
>>

arguments(expressionList) ::=<<
<expressionList>
>>

print(i) ::=<<
print(<i>)
>>

variableDeclarator(i, variableInitializer) ::=<<
<i> <if (variableInitializer)>= <variableInitializer><else>= None<endif>
>> 
localVariableDeclaration(variableModifiers, type, variableDeclarator) ::=<<
<variableDeclarator>
>>

localVariableDeclarationStatement(localVariableDeclaration) ::=<<
<localVariableDeclaration>
>> 

doStatement(statement, parExpression) ::=<<
while True:
    <statement>
    if <parExpression>:
        continue
    else:
        break
>>

caseLabel(expression) ::=<<
elif switchVal==<expression>
>> 

breakStatement(i) ::=<<
break
>>

switchBlockStatementGroup(switchLabel, bs) ::=<<
<switchLabel>:
    <if(bs)><bs; separator="\n"><else>  pass<endif>
>> 

switchBlockStatementGroups(s) ::=<<
<s; separator="\n">
>>

switchStatement(parExpression, switchBlockStatementGroups) ::=<<
switchVal = <parExpression>
if 2==1:
    #to remove, unreachable condition
    print("error")
<switchBlockStatementGroups>
>> 

normalForLoop(forInit, expression, expressionList, statement) ::=<<
<forInit>
<if(expression)>
while <expression>:
<else>
while True:

<endif>
    <statement>
    <expressionList>

>>

increment(p, selectors) ::=<<
<p><selectors; separator=".">=<p><selectors; separator=".">+1
>>

decrement(p, selectors) ::=<<
<p><selectors; separator=".">=<p><selectors; separator=".">-1
>>


enhancedForLoop(variableModifiers, type, i, expression, statement) ::=<<
for <i> in <expression>:
    <statement>
>> 

fieldDeclaration(mod, type, variableDeclarator, variableDeclarators) ::=<<
    <variableDeclarator><if (variableDeclarators)>,<variableDeclarators; separator=","><endif>

>>

typeArgument(type) ::=<<

    #typeArgument to do

>> 

typeArguments(t, ts) ::=<<

    #typeArguments to do

>> 

thisPrimary(i, identifierSuffix) ::=<<
self.<i><identifierSuffix>
>>

expressionSelector(expression) ::=<<

    #expressionSelector to do

>>

endStatement() ::=<<

    #endStatement to do

>>

returnStatement(expr) ::=<<
return <expr>
>> 

greater() ::=<<
>
>>

expressionIdentifierSuffix(expression) ::=<<

    #expressionIdentifierSuffix to do

>>
identiferSelector(i, arguments) ::=<<

   <i><if (arguments)>(<arguments>)<endif>

>> 

classBodyDeclarationBlock(block) ::=<<

    <block>

>>

comment(comment) ::=<<
# <comment>
>>

multiLineComment(comment) ::=<<
'''
<comment>
'''
>>

commentText(comment) ::=<<
    <comment; separator=" ">
>>

noTypeDeclaration() ::=<<

>>

defaultcase() ::=<<
else
>>

methodDeclarationBrackets(mod, typeParameters, i, formalParameters, qualifiedNameList, explicitConstructorInvocation, blockStatements) ::= <<
    <i>(<formalParameters>):
        <blockStatements; separator="\n">
>>

annotationTypeBody(a) ::=<<
<if(a)><a; separator="\n"><else>
None

<endif>
>>

annotationTypeDeclaration(mod, i, annotationTypeBody) ::=<<
class <i>:
    <annotationTypeBody>
>>

annotation(qualifiedName, elementValuePairs, elementValue) ::= <<
    @<qualifiedName>
>>

annotationMethodDeclaration(mod, type, i, elementValue) ::=<<

    #annotationMethodDeclaration to do

>>

elementValuePairs(e, es) ::=<<

    #elementValuePairs to do

>>

elementValuePair(i, elementValue) ::=<<

    #elementValuePair to do

>> 

arrayInitializer(v1, vs) ::=<<
[<v1><if(vs)>,<vs;separator=","><endif>]
>> 

expressionArrayCreator(createdName, e1, es) ::=<<

    #expressionArrayCreator to do

>> 

assertStatementNL(e1, e2) ::=<<
assert <e1>
>> 

formalParameter(variableModifiers, type, i) ::=<<
<type> as <i>
>>

catchClause(formalParameter, block) ::=<<
except <formalParameter>:
    <block>
>> 

catches(c, cs) ::=<<

<c>
<cs>

>>

tryCatches(b1, catches) ::=<<
try:
    <b1>
<catches>
>> 

timesAssign() ::=<<
*=
>> 

divAssign() ::=<<
/=
>>

andAssign() ::=<<
&=
>>

orAssign() ::=<<
|=
>>

powerAssign()::=<<
^=
>>

modAssign()::=<<
%=
>>

lessAssing(x)::=<<
<x>
>>

greaterAssign(x)::=<<
<x>
>>

short() ::=<<

    #short to do

>> 
char() ::=<<

    #char to do

>> 
long() ::=<<

    #long to do

>> 

float() ::=<<

    #float to do

>> 

double() ::=<<

    #double to do

>> 

bool() ::=<<

    #bool to do

>> 
minus(unaryExpression) ::=<<

    #minus to do

>> 

true()::=<<
True
>>

false()::=<<
False
>>

interfaceMethodDeclaration(mod, typeParameters, type, i, formalParameters) ::=<<
def <i>(<formalParameters>):
    None

>> 

interfaceBody(ibd) ::=<<
<ibd; separator=",">

>> 

normalInterfaceDeclaration(mod, i, params, typeList, block) ::=<<
class <i><if (typeList)>(<typeList>)<endif>:
    <block>

>> 


typeList(t1, ts) ::=<<
<t1><if(ts)>,<ts; separator=","><endif>
>>

voidClassPrimary() ::=<<
None.__class__
>>

add(unaryExpression) ::=<<

    #add to do

>> 

continueStatement(i) ::=<<
continue <i>
>> 

comparisonLiteral(a,b,c) ::=<<
#todo
>>

qualifiedNameList(q1, qs) ::=<<
q1<if(qs)><qs; separator=","><endif>
>>

throwStatement(expr) ::=<<
raise <expr>
>> 

tryCatchesFinally(b1, catches, b2) ::=<<
try:
    <b1>
<catches>
finally:
    <b2>
>> 

classCreatorRest(arguments, classBody) ::=<<
<arguments><classBody>
>> 

creator(classOrInterfaceType, classCreatorRest) ::=<<
<classOrInterfaceType>(<classCreatorRest>)

>> 

nonPrimitiveCast(type, unaryExpressionNotPlusMinus) ::=<<
<type> ( <unaryExpressionNotPlusMinus> )
>> 

identifierStatement(i, statement) ::=<<
<statement>
>>

enumConstant(annotations, i, arguments, block) ::=<<
<i>
>> 

enumConstants(c1, cs) ::=<<
<c1>
<cs; separator="\n">

>>

enumBody(enumConstants, enumBodyDeclarations) ::=<<
    <enumBodyDeclarations>
<enumConstants>
>>

enumDeclaration(mod, id, typeList, enumBody) ::=<<
class <id>:
<enumBody>
>>

enumBodyDeclarations(cbd) ::=<<
<cbd; separator="\n">
>>