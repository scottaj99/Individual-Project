group Python;

compilationUnit(annotatios, packageDeclaration, importDeclaration, typeDeclaration) ::=<<
    <importDeclaration>
    <typeDeclaration>

>> 

packageDeclaration(name) ::=<<

    #packageDeclaration to do

>> 

singleIDImportDeclaration(i) ::=<<

    #singleIDImportDeclaration to do

>> 

multiIDImportDeclaration(i1, ids) ::=<<

    #multiIDImportDeclaration to do

>> 

qualifiedImportName(i1, ids) ::=<<

    #qualifiedImportName to do

>> 

normalClassDeclaration(mod, i, params, type, typeList, block) ::=<<

    #normalClassDeclaration to do

>> 

typeParameters(p1, ps) ::=<<

    #typeParameters to do

>> 

typeParameter(id, typeBound) ::=<<

    #typeParameter to do

>> 

typeBound(t1, ts) ::=<<

    #typeBound to do

>> 

enumDeclaration(mod, id, typeList) ::=<<

    #enumDeclaration to do

>> 

enumBody(enumConstants, enumBodyDeclarations) ::=<<

    #enumBody to do

>> 

enumConstants(c1, cs) ::=<<

    #enumConstants to do

>>
enumConstant(annotations, i, arguments, block) ::=<<

   #enumConstant to do

>> 

enumBodyDeclarations(cbd) ::=<<

    #enumBodyDeclarations to do

>> 

normalInterfaceDeclaration(mod, i, params) ::=<<

    #normalInterfaceDeclaration to do

>> 

typeList(t1, ts) ::=<<

    #typeList to do

>> 

classBody(cbd) ::=<<

    #classBody to do

>> 

interfaceBody(ibd) ::=<<

    #interfaceBody to do

>> 

classBodyDeclarationComma() ::=<<

    #classBodyDeclarationComma to do

>> 

classBodyDeclarationBlock(block) ::=<<

    #classBodyDeclarationBlock to do

>> 

classBodyDeclarationMemberDecl(memberDecl) ::=<<

    #classBodyDeclarationMemberDecl to do

>> 

methodDeclarationBrackets(mod, typeParameters, i, formalParameters) ::=<<

    #methodDeclarationBrackets to do

>> 

methodDeclarationSemiColon(mod, typeParameters, type, i, formalParameters) ::=<<

    #methodDeclarationSemiColon to do

>> 

fieldDeclaration(mod, type, variableDeclarator, variableDeclarators) ::=<<

    #fieldDeclaration to do

>> 

variableDeclarator(i, variableInitializer) ::=<<

    #variableDeclarator to do

>> 

interfaceBodyDeclarationNoBody() ::=<<

    #interfaceBodyDeclarationNoBody to do

>> 

interfaceMethodDeclaration(mod, typeParameters, type, i, formalParameters) ::=<<

    #interfaceMethodDeclaration to do

>> 

interfaceFieldDeclaration(mod, type, v1, vs) ::=<<

    #interfaceFieldDeclaration to do

>> 

typeClassOrInterfaceType(classOrInterfaceType) ::=<<

    #typeClassOrInterfaceType to do

>> 

typePrimitiveType(primitiveType) ::=<<

    #typePrimitiveType to do

>> 

classOrInterfaceType(i, typeArguments, ids, tas) ::=<<

    #classOrInterfaceType to do

>> 

bool() ::=<<

    #bool to do

>> 

char() ::=<<

    #char to do

>> 

byte() ::=<<

    #byte to do

>> 

short() ::=<<

    #short to do

>> 

int() ::=<<

    #int to do

>> 

long() ::=<<

    #long to do

>> 

float() ::=<<

    #float to do

>> 

double() ::=<<

    #double to do

>> 

typeArguments(t, ts) ::=<<

    #typeArguments to do

>> 

typeArgument(type) ::=<<

    #typeArgument to do

>> 

typeArgumentExtend(type) ::=<<

    #typeArgumentExtend to do

>> 

qualifiedNameList(q1, qs) ::=<<

    #qualifiedNameList to do

>> 

formalParameters(formalParameterDecls) ::=<<

    #formalParameters to do

>> 

formalParameterDeclsEllipsis(ellipsisParameterDecl) ::=<<

    #formalParameterDeclsEllipsis to do

>> 

formalParameterDeclsNormal(n, ns) ::=<<

    #formalParameterDeclsNormal to do

>> 

formalParameterDeclsCombo(normalParameterDecls) ::=<<

    #formalParameterDeclsCombo to do

>> 



normalParameterDecl(variableModifiers, type, i) ::=<<

    #normalParameterDecl to do

>> 

ellipsisParameterDecl(variableModifiers, type) ::=<<

    #ellipsisParameterDecl to do

>> 


explicitConstructorInvocation(nonWildcardTypeArguments, arguments) ::=<<

    #explicitConstructorInvocation to do

>> 

explicitConstructorInvocation(primary, nonWildcardTypeArguments, arguments) ::=<<

    #explicitConstructorInvocation to do

>> 

qualifiedName(i, is) ::=<<

    #qualifiedName to do

>> 

annotations(annotations) ::=<<

    #annotations to do

>> 

annotation(qualifiedName, elementValuePairs) ::=<<

    #annotation to do

>> 

elementValuePairs(e, es) ::=<<

    #elementValuePairs to do

>> 

elementValuePair(i, elementValue) ::=<<

    #elementValuePair to do

>> 

elementValueArrayInitializer(e, es) ::=<<

    #elementValueArrayInitializer to do

>> 

annotationTypeDeclaration(mod, i, annotationTypeBody) ::=<<

    #annotationTypeDeclaration to do

>> 

annotationTypeBody(a) ::=<<

    #annotationTypeBody to do

>> 

annotationTypeElementDeclarationEmpty() ::=<<

    #annotationTypeElementDeclarationEmpty to do

>> 

annotationMethodDeclaration(mod, type, i, elementValue) ::=<<

    #annotationMethodDeclaration to do

>> 

block(b) ::=<<

    #block to do

>> 

localVariableDeclarationStatement(localVariableDeclaration) ::=<<

    #localVariableDeclarationStatement to do

>> 

localVariableDeclaration(variableModifiers, type, variableDeclarator) ::=<<

    #localVariableDeclaration to do

>> 

assertStatementNL(e1, e2) ::=<<

    #assertStatementNL to do

>> 

assertStatement(e1, e2) ::=<<

    #assertStatement to do

>> 

whilestatement(parExpression, statement) ::=<<

    #whilestatement to do

>> 

doStatement(statement, parExpression) ::=<<

    #doStatement to do

>> 

switchStatement(parExpression) ::=<<

    #switchStatement to do

>> 

syncStatement(parExpression, block) ::=<<

   #syncStatement to do

>> 

returnStatement(expr) ::=<<

    #returnStatement to do

>> 

throwStatement(expr) ::=<<

    #throwStatement to do

>> 

breakStatement(i) ::=<<

    #breakStatement to do

>> 

continueStatement(i) ::=<<

    #continueStatement to do

>> 

expressionStatement(expr) ::=<<

    #expressionStatement to do

>> 

identifierStatement(i) ::=<<

    #identifierStatement to do

>> 

endStatement() ::=<<

    #endStatement to do

>> 

switchBlockStatementGroups(s) ::=<<

    #switchBlockStatementGroups to do

>> 

switchBlockStatementGroup(switchLabel, bs) ::=<<

    #switchBlockStatementGroup to do

>> 

caseLabel(expression) ::=<<

    #caseLabel to do

>> 

defaultcase() ::=<<

    #defaultcase to do

>> 

tryCatchesFinally(b1, catches, b2) ::=<<

    #tryCatchesFinally to do

>> 

tryCatches(b1, catches) ::=<<

    #tryCatches to do

>> 

tryFinally(b1, b2) ::=<<

    #tryFinally to do

>> 

catches(c, cs) ::=<<

    #catches to do

>> 

catchClause(formalParameter, block) ::=<<

    #catchClause to do

>> 

formalParameter(variableModifiers, type, i) ::=<<

    #formalParameter to do

>> 

enhancedForLoop(variableModifiers, type, i) ::=<<

    #enhancedForLoop to do

>> 

normalForLoop(forInit, expression, expressionList) ::=<<

    #normalForLoop to do

>> 

parExpression(expression) ::=<<

    #parExpression to do

>> 

expressionList(expression, es) ::=<<

    #expressionList to do

>> 

expression(conditionalExpression, assignmentOperator, expression) ::=<<

   #expression to do

>> 

assign() ::=<<

    #assign to do

>> 

addAssign() ::=<<

    #addAssign to do

>> 

subAssign() ::=<<

    #subAssign to do

>> 

timesAssign() ::=<<

    #timesAssign to do

>> 

divAssign() ::=<<

    #divAssign to do

>> 

andAssign() ::=<<

    #andAssign to do

>> 

orAssign() ::=<<

    #orAssign to do

>> 

powerAssign() ::=<<

    #powerAssign to do

>> 

modAssign() ::=<<

    #modAssign to do

>> 

lessAssing() ::=<<

    #lessAssing to do

>> 

greaterAssign() ::=<<

    #greaterAssign to do

>> 

greaterAssign() ::=<<

    #greaterAssign to do

>> 

conditionalExpression(conditionalOrExpression, expression) ::=<<

    #conditionalExpression to do

>> 


conditionalOrExpression(conditionalAndExpression, cs) ::=<<

    #conditionalOrExpression to do

>> 

conditionalAndExpression(i, is) ::=<<

    #conditionalAndExpression to do

>> 

inclusiveOrExpression(e, es) ::=<<

    #inclusiveOrExpression to do

>> 

exclusiveOrExpression(a, as) ::=<<

    #exclusiveOrExpression to do

>> 

andExpression(e, es) ::=<<

    #andExpression to do

>> 

equalityExpression(i, symbols, is) ::=<<

    #equalityExpression to do

>> 

instanceOfExpression(relationalExpression, type) ::=<<

    #instanceOfExpression to do

>> 

relationalExpression(shiftExpression, relationalOp) ::=<<

    #relationalExpression to do

>> 


lessEquals() ::=<<

    #lessEquals to do

>> 

greaterEquals() ::=<<

    #greaterEquals to do

>> 

less() ::=<<

    #less to do

>> 

greater() ::=<<

    #greater to do

>> 

shiftExpression(a1, s, a) ::=<<

    #shiftExpression to do

>> 

left() ::=<<

    #left to do

>> 

rightMost() ::=<<

    #rightMost to do

>> 

right() ::=<<

    #right to do

>> 

additiveExpression(m1, symbols, ms) ::=<<

    #additiveExpression to do

>> 

multiplicativeExpression(u, symbols, us) ::=<<

    #multiplicativeExpression to do

>> 

add(unaryExpression) ::=<<

    #add to do

>> 

minus(unaryExpression) ::=<<

    #minus to do

>> 

increment(unaryExpression) ::=<<

    #increment to do

>> 

decrement(unaryExpression) ::=<<

    #decrement to do

>> 

tildeExpression(unaryExpression) ::=<<

    #tildeExpression to do

>> 

notExpression(unaryExpression) ::=<<

    #notExpression to do

>> 

primaryExpression(p, selectors, symbol) ::=<<

    #primaryExpression to do

>> 

primitiveCast(primitiveType, unaryExpression) ::=<<

    #primitiveCast to do

>> 

nonPrimitiveCast(type, unaryExpressionNotPlusMinus) ::=<<

    #nonPrimitiveCast to do

>> 

thisPrimary(i, identifierSuffix) ::=<<

    #thisPrimary to do

>> 

identifierPrimary(i, is, identifierSuffix) ::=<<

    #identifierPrimary to do

>> 

superPrimary(superSuffix) ::=<<

    #superPrimary to do

>> 

primitivePrimary(primitiveType) ::=<<

    #primitivePrimary to do

>> 

voidClassPrimary() ::=<<

    #voidClassPrimary to do

>> 

argumentsSuperSuffix(arguments) ::=<<

    #argumentsSuperSuffix to do

>> 

IDSuperSuffix(typeArguments, i, arguments) ::=<<

    #IDSuperSuffix to do

>> 

BracketsidentifierSufix() ::=<<

    #BracketsidentifierSufix to do

>> 

expressionIdentifierSuffix(expression) ::=<<

    #expressionIdentifierSuffix to do

>> 

classIdentifier() ::=<<

    #classIdentifier to do

>> 

nonWildCardIdentifier(nonWildcardTypeArguments, i, arguments) ::=<<

    #nonWildCardIdentifier to do

>> 

thisIdentifier() ::=<<

    #thisIdentifier to do

>> 

argumentsIdentifier(arguments) ::=<<

    #argumentsIdentifier to do

>> 

identiferSelector(i, arguments) ::=<<

    #identiferSelector to do

>> 

thisSelector() ::=<<

    #thisSelector to do

>> 

superSelector(superSuffix) ::=<<

    #superSelector to do

>> 

expressionSelector(expression) ::=<<

    #expressionSelector to do

>> 

nonWildcardTypeCreator(nonWildcardTypeArguments) ::=<<

    #nonWildcardTypeCreator to do

>> 

creator(classOrInterfaceType, classCreatorRest) ::=<<

    #creator to do

>> 

bracketedArrayCreator(createdName, arrayInitializer) ::=<<

    #bracketedArrayCreator to do

>> 

expressionArrayCreator(createdName, e1, es) ::=<<

    #expressionArrayCreator to do

>> 

arrayInitializer(v1, vs) ::=<<

    #arrayInitializer to do

>> 

innerCreator(nonWildcardTypeArguments, i, typeArguments) ::=<<

    #innerCreator to do

>> 

classCreatorRest(arguments, classBody) ::=<<

    #classCreatorRest to do

>> 

nonWildcardTypeArguments(typeList) ::=<<

    #nonWildcardTypeArguments to do

>> 

arguments(expressionList) ::=<<

    #arguments to do

>> 

classHeader(modifiers, i) ::=<<

    #classHeader to do

>> 

enumHeader(modifiers, i, i2) ::=<<

    #enumHeader to do

>> 

interfaceHeader(modifiers, i) ::=<<

    #interfaceHeader to do

>> 

annotationHeader(modifiers, i) ::=<<

    #annotationHeader to do

>> 

typeHeader(modifiers, i) ::=<<

    #typeHeader to do

>> 

methodHeader(modifiers, typeParameters) ::=<<

    #methodHeader to do

>> 

fieldHeader(modifiers, type, i) ::=<<

    #fieldHeader to do

>> 

localVariableHeader(variableModifiers, type, i) ::=<<

    #localVariableHeader to do

>> 
